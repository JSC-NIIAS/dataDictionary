(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_bar_post.
Hint bar,default,property.
Proof.
  intros.

  unfold P_Positive_3_ in *.
  unfold P_Positive_1_ in *.
  subst a_4.
  split.
    + unfold F_Pair_first.
      simpl.
      rewrite access_update_neq.
      - rewrite access_update.
        assumption.
      - subst a_1 a_2.
        rewrite shift_zero in *.
        apply shift_different; omega.
    +  admit.
 
Qed.

Goal typed_ref_BitTest_copy_Z_loop_inv_2_preserved.
Hint copy_Z,preserved.
Proof.
  intros.
  (* unfold P_IsEqual_Z in I. intros. *)

  subst x_0 x_1 x_2.
  subst a_1 a_2 a_3 a_4 a_5.

  rewrite shift_zero in *.

  assert(X: forall M addr i, (F_Z_a (Load_S_Z (shift addr i) M) = M.[shift addr i])). admit.

  assert (less_equal: k_0 <= i_0) by omega.
  apply Zle_lt_or_eq in less_equal.
  destruct less_equal as [less | equal].

  - assert(EqS_Z (Load_S_Z (shift a_0 (3 * k_0)) Mint_2)
                 (Load_S_Z (shift a_0 (3 * k_0)) Mint_1)) by (apply H19; auto with zarith).
    assert(EqS_Z (Load_S_Z (shift b_0 (3 * k_0)) Mint_2)
                 (Load_S_Z (shift b_0 (3 * k_0)) Mint_1)) by (apply H21; auto with zarith).

    apply Q_Z_Eq_transitive with (Load_S_Z (shift a_0 (3 * k_0)) Mint_1).
      + unfold IsS_Z.
        split. (* unfold Load_S_Z. unfold F_Z_a. *)
        * replace (F_Z_a (Load_S_Z (shift a_0 (3 * k_0)) Mint_2))%Z
            with  (Mint_2.[shift a_0 (3 * k_0)])%Z.
          admit.
          rewrite <- X; trivial.
            
        * admit.
      + admit.
      + admit.
      + assumption.
      + apply Q_Z_Eq_transitive with (Load_S_Z (shift b_0 (3 * k_0)) Mint_1).
        admit.
        admit.
        admit.
        apply H20; auto with zarith.
        apply Q_Z_Eq_symmetric.
        * admit.
        * admit.
        * assumption.

  -
    rewrite equal.
    assert (EqS_Z (Load_S_Z (shift a_0 (3 * i_0)) Mint_2)
                  (Load_S_Z (shift a_0 (3 * i_0)) Mint_1)) by admit.

    apply Q_Z_Eq_transitive with (Load_S_Z (shift a_0 (3 * i_0)) Mint_1).
      admit.
      admit.
      admit.
      assumption.
    apply Q_Z_Eq_symmetric.
      admit.
      admit.
    assumption.

Qed.

Goal typed_ref_BitTest_foo_post.
Hint default,foo,property.
Proof.
  intros.
  unfold P_Positive_1_.
  unfold P_Positive_2_ in *.

  auto with zarith.
Qed.

Goal typed_ref_BitTest_lemma_Z_Eq_transitive.
Hint Z_Eq_transitive,property.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_push_back_enough_space_post_3_part1.
Hint enough_space,part-0,property,push_back.
Proof.
  unfold is_uint32 in *.
  intros.

  rewrite shift_zero in *.

  remember (Mptr_0 .[ v_0]) as addr.
  remember (Mint_0 .[ shift v_0 1]) as size.
  remember (Mint_0 .[ shift v_0 2]) as capacity.

  rewrite access_update_neq.
  rewrite access_update_neq.
Qed.

Goal typed_ref_BitTest_push_back_twice_assert.
Hint property,push_back_twice.
Proof.

   (*   ~(P_full m_0 v_2) *)
   unfold is_uint32 in *.
   intros.
Qed.


