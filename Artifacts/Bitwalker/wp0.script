(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_Bitstream_WriteThenRead_assert_lower_bits.
Hint Bitstream_WriteThenRead,lower_bits,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in * .
  unfold P_EqualBits64_1_ in * .
  unfold P_EqualBitRange_2_ in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  replace (Mint_1 .[ shift stream_0 2] + (v_0 - (Mint_1 .[ shift stream_0 2])))%Z
     with (v_0)%Z in * by omega.

  replace (i_0)%Z with (v_0 - 1 - (v_0 - 1 - i_0))%Z by omega.
  rewrite H20; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitstream_WriteThenRead_post_unchanged.
Hint Bitstream_WriteThenRead,default,property,unchanged.
Proof.
  unfold P_EqualBitRange_2_ in *.
  intros.
  apply bits_equal_uint64; auto.
  intros.
  symmetry.
  apply H8; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitstream_Write_normal_case_post_middle.
Hint Bitstream_Write,middle,normal_case,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  unfold P_Normal in *.
  unfold is_uint32 in *.

  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember i_0 as i.
  remember stream_0 as stream.
  remember length_0 as length.
  remember (Mptr_0.[stream]) as addr.
  remember (Mint_0.[shift stream 1]) as size.
  remember (Mint_0.[shift stream 2]) as bitpos.
  rewrite H8 in *.

  replace (length + bitpos - bitpos) with length in * by omega.

  rewrite access_update_neq.
  + apply H30; auto with zarith. 

  + clear H28 H29 H30.
    apply separated_neq with (stream) (3%Z) (addr) (size).
    - assumption.
    - unfold included; simpl; auto with zarith.

    - assert ((0 <= (Cdiv i 8) < size)%Z).
      apply Cdiv_bounds; omega.
      unfold included; simpl; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_Normal_loop_inv_copied_preserved.
Hint Bitwalker_Peek_Normal,copied,preserved.
Proof.
  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.
  unfold P_EqualBits64_1_ in *.
  intros.

  case_lt i_1 (i_0 + start_0)%Z.

  - (* less *)
    intros less.
    rewrite <- H24; auto with zarith.
    replace ((start_0 + length_0 - 1 - i_1)%Z) with ((63 - (63 - (length_0 + start_0 - 1 - i_1)))%Z) by omega.
    apply H28; auto with zarith.

  - (* equal *)
    intros.
    assert(equal: (i_1 = i_0 + start_0)%Z) by auto with zarith.
    rewrite equal in *.
    rewrite <- H26; auto with zarith.
    replace (start_0 + length_0 - 1 - (i_0 + start_0))%Z with (length_0 - 1 - i_0)%Z by omega.
    symmetry.
    assumption.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_Normal_loop_inv_not_set_preserved.
Hint Bitwalker_Peek_Normal,not_set,preserved.
Proof.
  unfold P_UpperBitsNotSet in *.
  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.
  intros.

  assert(i_1 < 64 \/ ~(i_1 < 64))%Z by tauto.
  assert(length_0 <= i_1 < 64 \/ 64 <= i_1)%Z.

    - destruct H29 as [leq | gt].
      + left; auto with zarith.
      + right; auto with zarith.

    - destruct H29 as [left | right].
      + replace (i_1)%Z with (63 - (63 - i_1))%Z by omega.
        rewrite H27; auto with zarith.
      + apply to_uint64_extraction_sup; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_Normal_loop_inv_middle_preserved.
Hint Bitwalker_Poke_Normal,middle,preserved.
Proof.
  unfold P_EqualBits64_1_ in *.
  unfold is_uint64 in *.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember value_0 as value.

  case_lt i_1 i_0.
  * 
   intros.
   rewrite H24; auto with zarith.

  * 
   intros.
   assert(equal: (i_1 = i_0)%Z) by omega.
   rewrite equal in *.
   replace (start + length)%Z  with  (length + start)%Z by omega.
   rewrite <- H29; auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeBit8Array_post_left.
Hint PokeBit8Array,default,left,property.
Proof.
(* --------------------------------------
  
From 'typed_ref_BitTest_PokeBit8Array_post_right': 
(* auto with zarith. *)
*)
Qed.

Goal typed_ref_BitTest_PokeBit8Array_post_right.
Hint PokeBit8Array,default,property,right.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_partial_copy.
Hint PokeThenPeek,partial_copy,property.
Proof.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  unfold P_EqualBitRange_2_ in *.
  intros.

  replace (length_0 + start_0 - start_0)%Z with length_0 in * by omega.
  replace (i_0)%Z  with  (start_0 + length_0 - 1 - (start_0 + length_0 - 1 - i_0 ))%Z by omega.

  rewrite H19; auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_post_result_value.
Hint PokeThenPeek,default,property,result_value.
Proof.
  intros.
  apply bits_equal_uint64; auto with zarith.
Qed.

Goal typed_ref_BitTest_UpperBitsNotSet64_post_not_set_part2.
Hint UpperBitsNotSet64,default,not_set,part-1,property.
Proof.
  unfold is_uint64 in *.
  unfold P_UpperBitsNotSet.
  intros.

  rewrite is_uint64_lsl1_inf in H5; auto with zarith.
  intuition.
  assert (X: (forall i_0 : int, (length_0 <= i_0)%Z -> ~ bit_test value_0 i_0)) by auto with zarith.
  rewrite <- bits_and_bounds_uint in X; auto with zarith.
Qed.

Goal typed_ref_BitTest_UpperBitsNotSet64_post_not_set_part3.
Hint UpperBitsNotSet64,default,not_set,part-2,property.
Proof.
  unfold is_uint64 in *.
  intros.
  unfold P_UpperBitsNotSet in *.
  apply bits_and_bounds_uint; auto with zarith.
  rewrite is_uint64_lsl1_inf in H5; omega.
Qed.

Goal typed_ref_BitTest_UpperBitsNotSet64_post_part1.
Hint UpperBitsNotSet64,default,part-0,property.
Proof.
  unfold is_uint64 in *.
  unfold P_UpperBitsNotSet.
  intros.

  rewrite is_uint64_lsl1_inf in H4; auto with zarith.
  intuition.
  assert (X: (forall i_0 : int, (length_0 <= i_0)%Z -> ~ bit_test value_0 i_0)) by auto with zarith.
  rewrite <- bits_and_bounds_uint in X; auto with zarith.
Qed.

Goal typed_ref_BitTest_UpperBitsNotSet64_post_part2.
Hint UpperBitsNotSet64,default,part-1,property.
Proof.
  intros.
  unfold is_uint64 in *.
  unfold P_UpperBitsNotSet.
  apply bits_and_bounds_uint; auto with zarith.
  rewrite is_uint64_lsl1_inf in H4; omega.
Qed.


