(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_Bitstream_Read_normal_case_post.
Hint Bitstream_Read,normal_case,property.
Proof.
  intros.

  subst a_0 a_1 a_2 a_3.
  subst x_0 x_1 x_2 x_3.

  unfold P_BitstreamEqual64 in *.
  unfold P_LeftBitInStream in *.
  unfold P_BitstreamInvariant in *.
  unfold P_NormalBitsequence in *.
  intros.

  unfold is_uint64 in *.
  unfold is_uint32 in *.
 
  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember stream_0 as stream.
  remember length_0 as length.
  remember i_0 as i.
  remember (Mptr_0.[stream]) as addr.
  remember (Mint_0.[shift stream 1]) as size.
  remember (Mint_0.[shift stream 2]) as bitpos.

  replace ((Mint_0 .[ shift stream 2 <- (length + bitpos)%Z]) .[ shift addr (Cdiv i 8)]) 
    with  (Mint_0.[ shift addr (Cdiv i 8)]).

  replace (length + bitpos - 1 - i)%Z
    with  (length - 1 - (i - bitpos))%Z by omega.


  rewrite H21; auto with zarith.
  replace (i - bitpos + bitpos)%Z with i%Z by omega.

  + intuition.
  + rewrite access_update_neq.
    - trivial.
    - destruct H6 as [A [B C]].

      apply separated_neq with (stream) (3%Z) (addr) (size).
      * assumption.
      * unfold included; simpl; omega.
      * assert(X: (0 <= (Cdiv i 8) < size)%Z).
          apply Cdiv_bounds; omega.
        unfold included; simpl; omega.

Qed.

Goal typed_ref_BitTest_Bitstream_Read_normal_case_post_2.
Hint Bitstream_Read,normal_case,property.
Proof.
(* --------------------------------------
  
From 'typed_ref_BitTest_Bitstream_Read_normal_case_post': 
  intros.

  subst a_0 a_1 a_2 a_3.
  subst x_0 x_1 x_2 x_3.

  unfold is_uint64 in *.
  unfold is_uint32 in *.
  unfold P_LeftBitInStream in *.
  unfold P_BitstreamInvariant in *.
  unfold P_NormalBitsequence in *.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0.[stream_0]) as addr.
  remember (Mint_0.[shift stream_0 1]) as size.
  remember (Mint_0.[shift stream_0 2]) as bitpos.
  remember length_0 as length.
  remember i_0 as i.

  replace ((Mint_0 .[ shift stream_0 2 <- (length + bitpos)%Z]) .[ shift addr (Cdiv i 8)]) 
    with  (Mint_0.[ shift addr (Cdiv i 8)]).

  replace (length + bitpos - 1 - i)%Z with (length - 1 - (i - bitpos))%Z by omega.

  rewrite H22; auto with zarith.
  replace (i - bitpos + bitpos)%Z with i%Z by omega.

  + intuition.
  + rewrite access_update_neq.
    -  trivial.
    -  destruct H7 as [A [B C]].

      apply separated_sym in C.
      apply separated_neq with (stream_0) (3%Z) (addr) (size).
      * assumption.
      * unfold included; simpl; auto with zarith.
      * assert(X: (0 <= (Cdiv i 8) < size)%Z).
          apply Cdiv_bounds; auto with zarith.
        unfold included; simpl; auto with zarith.

*)
Qed.

Goal typed_ref_BitTest_Bitstream_Read_normal_case_post_copied.
Hint Bitstream_Read,copied,normal_case,property.
Proof.
  intros.

  subst a_0 a_1 a_2 a_3.
  subst x_0 x_1 x_2 x_3.

  unfold P_BitstreamEqual64 in *.
  unfold P_LeftBitInStream in *.
  unfold P_BitstreamInvariant in *.
  unfold P_NormalBitsequence in *.
  intros.

  unfold is_uint64 in *.
  unfold is_uint32 in *.
 
  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember stream_0 as stream.
  remember length_0 as length.
  remember i_0 as i.
  remember (Mptr_0.[stream]) as addr.
  remember (Mint_0.[shift stream 1]) as size.
  remember (Mint_0.[shift stream 2]) as bitpos.

  replace ((Mint_0 .[ shift stream 2 <- (length + bitpos)%Z]) .[ shift addr (Cdiv i 8)]) 
    with  (Mint_0.[ shift addr (Cdiv i 8)]).

  replace (length + bitpos - 1 - i)%Z
    with  (length - 1 - (i - bitpos))%Z by omega.


  rewrite H21; auto with zarith.
  replace (i - bitpos + bitpos)%Z with i%Z by omega.

  + intuition.
  + rewrite access_update_neq.
    - trivial.
    - destruct H6 as [A [B C]].

      apply separated_neq with (stream) (3%Z) (addr) (size).
      * assumption.
      * unfold included; simpl; omega.
      * assert(X: (0 <= (Cdiv i 8) < size)%Z).
          apply Cdiv_bounds; omega.
        unfold included; simpl; omega.
Qed.

Goal typed_ref_BitTest_Bitstream_Write_complete_normal_case_value_too_big_invali___.
Hint Bitstream_Write,invalid_bit_sequence,normal_case,property,value_too_big.
Proof.
  intros.
  unfold P_BitstreamInvariant.
  unfold P_NormalBitsequence in *.
  unfold is_uint32 in *.
  intuition.

Qed.

Goal typed_ref_BitTest_Bitstream_Write_normal_case_post.
Hint Bitstream_Write,normal_case,property.
Proof.
  intros.
  unfold P_BitstreamEqual64 in *.
  unfold P_NormalBitsequence in *.
  unfold P_LeftBitInStream.
  unfold P_BitstreamInvariant in *.
  unfold is_uint32 in *.

  intros.

  subst x_0 x_1 x_2 x_3 x_4 x_5 x_6.
  subst a_0 a_1 a_2 a_3 a_4.
 

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember i_0 as i.
  remember stream_0 as stream.
  remember length_0 as length.
  remember (Mptr_0.[stream]) as addr.
  remember (Mint_0.[shift stream 1]) as size.
  remember (Mint_0.[shift stream 2]) as bitpos.
  remember (Mint_1.[shift stream 2]) as new_bitpos.
  rewrite H7 in *.
  
  rewrite access_update_neq.
  + rewrite H30; auto with zarith.
    intuition.

  + 
    destruct H8 as [A [B C]].
    clear H27 H28 H29 H30. (* simplify proof context *) 
    apply separated_neq with (stream) (3%Z) (addr) (size).
    - assumption.
    - unfold included; simpl; omega.

    - assert ((0 <= (Cdiv i 8) < size)%Z).
      apply Cdiv_bounds; omega.
      unfold included; simpl; omega.
Qed.

Goal typed_ref_BitTest_Bitstream_Write_normal_case_post_2.
Hint Bitstream_Write,normal_case,property.
Proof.
  intros.
  unfold P_BitstreamEqual64 in *.
  unfold P_NormalBitsequence in *.
  unfold P_LeftBitInStream.
  unfold P_BitstreamInvariant in *.
  unfold is_uint32 in *.

  intros.

  subst x_0 x_1 x_2 x_3 x_4 x_5 x_6.
  subst a_0 a_1 a_2 a_3 a_4.
 

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember i_0 as i.
  remember stream_0 as stream.
  remember length_0 as length.
  remember (Mptr_0.[stream]) as addr.
  remember (Mint_0.[shift stream 1]) as size.
  remember (Mint_0.[shift stream 2]) as bitpos.
  remember (Mint_1.[shift stream 2]) as new_bitpos.
  rewrite H7 in *.
  
  rewrite access_update_neq.
  + rewrite H30; auto with zarith.
    intuition.

  + 
    destruct H8 as [A [B C]].
    clear H27 H28 H29 H30. (* simplify proof context *) 
    apply separated_neq with (stream) (3%Z) (addr) (size).
    - assumption.
    - unfold included; simpl; omega.

    - assert ((0 <= (Cdiv i 8) < size)%Z).
      apply Cdiv_bounds; omega.
      unfold included; simpl; omega.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_loop_inv_2_preserved.
Hint Bitwalker_Peek,preserved.
Proof.
  intros.

  subst x_1 x_2 x_3 x_4 x_5.

  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.

  assert(non_strict: (k_0 <= i_0)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  - (* less *)
    rewrite <- H32; auto with zarith.
    replace ((length_0 - 1 - k_0)%Z) with ((63 - (63 - (length_0 - 1 - k_0)))%Z) by omega.
    apply H31; auto with zarith.

  - (* equal *)
    rewrite equal in *.
    rewrite <- H25.
    assumption.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_loop_inv_3_preserved.
Hint Bitwalker_Peek,preserved.
Proof.
  intros.

  subst x_1 x_2 x_3 x_4 x_5.

  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.

  assert(non_strict: (k_0 <= i_0)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  - (* less *)
    apply H35; auto with zarith.
    replace ((length_0 - 1 - k_0)%Z) with ((63 - (63 - (length_0 - 1 - k_0)))%Z) by omega.    
    apply H32; auto with zarith.
    replace (63 - (63 - (length_0 - 1 - k_0)))%Z with ((length_0 - 1 - k_0)%Z) by omega.
    assumption.
  
  - (* equal *)
    rewrite equal in *.
    apply H30.
    apply H26.
    assumption.
    
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_loop_inv_copied_preserved.
Hint Bitwalker_Peek,copied,preserved.
Proof.
  intros.

  subst x_1 x_2 x_3 x_4 x_5.

  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.

  assert(non_strict: (k_0 <= i_0)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  - (* less *)
    rewrite <- H32; auto with zarith.
    replace ((length_0 - 1 - k_0)%Z) with ((63 - (63 - (length_0 - 1 - k_0)))%Z) by omega.
    apply H31; auto with zarith.

  - (* equal *)
    rewrite equal in *.
    rewrite <- H25.
    assumption.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_normal_case_post_2.
Hint Bitwalker_Peek,normal_case,property.
Proof.
  auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_normal_case_post_3.
Hint Bitwalker_Peek,normal_case,property.
Proof.
  intros.
  unfold is_uint64 in *.
  apply bits_and_bounds_uint; auto with zarith.
  intros.
  replace (k) with (63 - (63 - k))%Z by omega.
  apply H16; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_normal_case_post_3_part2.
Hint Bitwalker_Peek,normal_case,part-1,property.
Proof.
  intros.
  unfold is_uint64 in *.
  apply bits_and_bounds_uint; auto with zarith.
  intros.
  replace (k) with (63 - (63 - k))%Z by omega.
  apply H16; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_normal_case_post_valid_result_part2.
Hint Bitwalker_Peek,normal_case,part-1,property,valid_result.
Proof.
  intros.
  unfold is_uint64 in *.
  apply bits_and_bounds_uint; auto with zarith.
  intros.
  replace (k) with (63 - (63 - k))%Z by omega.
  apply H16; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_2_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember Value_0 as Value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  unfold is_uint32 in *.

  subst a_0 a_1 x_0 x_1 x_2 x_3 x_4 x_5 x_6.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
    subst x_8.
    subst x_2.
    apply H37; auto with zarith.
      unfold is_uint32 in H14.
      auto with zarith.

  * (* k = i*)
    subst x_8.
    subst x_5 x_6 x_7.
    subst x_2.
    rewrite equal in *.
    auto with zarith.
     
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_3_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember value_0 as value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_1 x_2 x_3 x_5 x_6.
  unfold is_uint64 in *.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.

  assert(non_strict: (k <= i + start)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i + start *)
   rewrite H36; auto with zarith.

  * (* k = i + start *)
   rewrite equal in *.
   replace (length + start - 1 - (i + start))%Z
     with  (length - 1 - i)%Z by omega.
   rewrite <- H26.
   assumption.   
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_3_preserved_part1.
Hint Bitwalker_Poke,part-0,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember value_0 as value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_1 x_2 x_3 x_5 x_6.
  unfold is_uint64 in *.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.

  assert(non_strict: (k <= i + start)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i + start *)
   rewrite H37; auto with zarith.
   rewrite H40; auto with zarith.
   intuition.

  * (* k = i + start *)
   rewrite equal in *.
   replace (length + start - 1 - (i + start))%Z
     with  (length - 1 - i)%Z by omega.
   rewrite <- H35.
   rewrite H31.
   intuition.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_3_preserved_part2.
Hint Bitwalker_Poke,part-1,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember value_0 as value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_1 x_2 x_3 x_4.
  unfold is_uint64 in *.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.

  assert(non_strict: (k <= i + start)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i + start *)
   rewrite H32; auto with zarith.
   rewrite H35; auto with zarith.
   intuition.

  * (* k = i + start *)
   rewrite equal in *.
   rewrite <- H30; auto with zarith.
   rewrite H26.
   replace (63 + start - (i + start))%Z
     with  (63 - i)%Z by omega.
   intuition.

Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_4_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.
  
  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember Value_0 as Value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_2 x_3 x_5 x_6 x_7 x_8.
  unfold is_uint32 in *.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
    apply H39; auto with zarith.

  * (* k = i *)
    rewrite equal in *.
    auto with zarith.

Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_5_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember Value_0 as Value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_2 x_3 x_5 x_6 x_7 x_8.
  unfold is_uint32 in *.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
    apply H44; auto with zarith.

  * (* k = i *)
    rewrite equal in *.
    auto with zarith.

Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_copied_preserved_part1.
Hint Bitwalker_Poke,copied,part-0,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember value_0 as value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_1 x_2 x_3 x_4 x_5.
  unfold is_uint64 in *.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.

  assert(non_strict: (k <= i + start)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i + start *)
   rewrite H38; auto with zarith.

  * (* k = i + start *)
   rewrite equal in *.
   replace (length + start - 1 - (i + start))%Z
     with  (length - 1 - i)%Z by omega.
   rewrite <- H29.
   assumption.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_copied_preserved_part2.
Hint Bitwalker_Poke,copied,part-1,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember value_0 as value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_1 x_2 x_3 x_4.
  unfold is_uint64 in *.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.

  assert(non_strict: (k <= i + start)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i + start *)
   rewrite H32; auto with zarith.
   rewrite H35; auto with zarith.
   intuition.

  * (* k = i + start *)
   rewrite equal in *.
   rewrite <- H30; auto with zarith.
   rewrite H26.
   replace (63 + start - (i + start))%Z
     with  (63 - i)%Z by omega.
   intuition.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_unchanged_left_established_part1.
Hint Bitwalker_Poke,established,part-0,unchanged_left.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_unchanged_left_established_part2.
Hint Bitwalker_Poke,established,part-1,unchanged_left.
Proof.
(* --------------------------------------
  
From 'typed_ref_BitTest_Bitwalker_Poke_loop_inv_unchanged_left_established_part1': 
(* auto with zarith. *)
*)
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_normal_case_post_3.
Hint Bitwalker_Poke,normal_case,property.
Proof.
  intros.

  subst x_0 x_1 x_2 x_3.
  unfold is_uint32 in *.
  subst a_1.
  rewrite H20; auto with zarith.
Qed.

Goal typed_ref_BitTest_PeekBitInStream_post.
Hint PeekBitInStream,default,property.
Proof.
  intros.
  subst a_0 x_0 x_1 x_2 x_3 x_4 x_5.
  unfold bit_test.
  unfold to_uint8 in *.
  auto with zarith.
Qed.

Goal typed_ref_BitTest_PeekThenPoke_assert.
Hint PeekThenPoke,property.
Proof.
  intros.
  unfold is_uint32 in *.
  subst x_0 x_1 a_0.
  rewrite shift_zero in *.

  replace (length_0 + start_0 - 1 - i_0)%Z
    with  (length_0 - 1 - (i_0 - start_0))%Z by omega.

  rewrite H14; auto with zarith.
  replace (i_0 - start_0 + start_0)%Z with i_0%Z by omega.
  intuition.
Qed.

Goal typed_ref_BitTest_PeekThenPoke_assert_2.
Hint PeekThenPoke,property.
Proof.
  intros.
  unfold is_uint32 in *.
  subst x_0 x_1 x_2 a_1.

  replace (i_0) with ((start_0 + (i_0 - start_0))%Z) by omega.

  rewrite <- H20; auto with zarith.
  rewrite <- H19; auto with zarith.
  intuition.

Qed.

Goal typed_ref_BitTest_PeekThenPoke_assert_copied.
Hint PeekThenPoke,copied,property.
Proof.
  intros.
  unfold is_uint32 in *.
  subst x_0 x_1 a_0.
  rewrite shift_zero in *.

  replace (length_0 + start_0 - 1 - i_0)%Z
    with  (length_0 - 1 - (i_0 - start_0))%Z by omega.

  rewrite H14; auto with zarith.
  replace (i_0 - start_0 + start_0)%Z with i_0%Z by omega.
  intuition.
Qed.

Goal typed_ref_BitTest_PeekThenPoke_post_2.
Hint PeekThenPoke,default,property.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_PokeBit8Array_post_unchanged_bits.
Hint PokeBit8Array,default,property,unchanged_bits.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_PokeBit8_post_3.
Hint PokeBit8,default,property.
Proof.
  intros.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert.
Hint PokeThenPeek,property.
Proof.
  intros.
  subst x_1 x_2 x_3.

  replace (63 - i_0)%Z  with
        (length_0 - 1 - (length_0 + i_0 - 64))%Z by omega.
  rewrite H21; auto with zarith.

  replace (length_0 + start_0 - 1 - (length_0 + start_0 + i_0 - 64))%Z
    with (length_0 - 1 - (length_0 - 64 + i_0))%Z by omega.

  rewrite <- H18; auto with zarith.
  replace (length_0 + start_0 - 1 - (length_0 + i_0 - 64 + start_0))%Z
    with (length_0 - 1 - (length_0 + i_0 - 64))%Z by omega.
  intuition.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_2.
Hint PokeThenPeek,property.
Proof.
  intros.
  replace (i_0)%Z with (63 - (63 - i_0))%Z by omega.
  apply H16; omega.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_3.
Hint PokeThenPeek,property.
Proof.
Proof.
  intros.
  replace (i_0)%Z with (63 - (63 - i_0))%Z by omega.
  apply H16; omega.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_5.
Hint PokeThenPeek,property.
Proof.
  intros.
  replace (i_0)%Z with (63 - (63 - i_0))%Z by omega.
  apply H16; omega.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_bits_covered.
Hint PokeThenPeek,bits_covered,property.
Proof.
 intros.
 unfold is_uint32 in *.
 unfold is_uint64 in *.
 rewrite bits_and_bounds_uint in H7; auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_full_copy2.
Hint PokeThenPeek,full_copy2,property.
Proof.
  intros.
  replace (i_0)%Z with (63 - (63 - i_0))%Z by omega.
  apply H16; omega.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_partial_copy.
Hint PokeThenPeek,partial_copy,property.
Proof.
  intros.
  subst x_1 x_2 x_3.

  replace (63 - i_0)%Z  with
        (length_0 - 1 - (length_0 + i_0 - 64))%Z by omega.
  rewrite H21; auto with zarith.

  replace (length_0 + start_0 - 1 - (length_0 + start_0 + i_0 - 64))%Z
    with (length_0 - 1 - (length_0 - 64 + i_0))%Z by omega.

  rewrite <- H18; auto with zarith.
  replace (length_0 + start_0 - 1 - (length_0 + i_0 - 64 + start_0))%Z
    with (length_0 - 1 - (length_0 + i_0 - 64))%Z by omega.
  intuition.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_post.
Hint PokeThenPeek,default,property.
Proof.
  intros.
  apply bits_equal_uint64; auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_post_result.
Hint PokeThenPeek,default,property,result.
Proof.
  intros.
  apply bits_equal_uint64; auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_post_result_value.
Hint PokeThenPeek,default,property,result_value.
Proof.
  intros.
  apply bits_equal_uint64; auto with zarith.
Qed.


