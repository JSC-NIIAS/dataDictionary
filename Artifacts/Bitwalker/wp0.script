(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_Bitwalker_IncrementalWalker_Peek_Next_normal_case_post.
Hint Bitwalker_IncrementalWalker_Peek_Next,normal_case,property.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_loop_inv_2_preserved.
Hint Bitwalker_Peek,preserved.
Proof.
  intros.

  subst x_1 x_2 x_3 x_4 x_5.

  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.

  assert(non_strict: (k_0 <= i_0)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  - (* less *)
    replace ((Length_0 - 1 - k_0)%Z) with ((63 - (63 - (Length_0 - 1 - k_0)))%Z) by omega.
    rewrite H31; auto with zarith.
    replace (63 - (63 - (Length_0 - 1 - k_0)))%Z with ((Length_0 - 1 - k_0)%Z) by omega.
    apply H33; auto with zarith.

  - (* equal *)
    rewrite equal in *.
    rewrite <- H25.
    rewrite H29.
    tauto.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_loop_inv_3_preserved.
Hint Bitwalker_Peek,preserved.
Proof.
  intros.

  subst x_1 x_2 x_3 x_4 x_5.

  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.

  assert(non_strict: (k_0 <= i_0)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  - (* less *)
    apply H35; auto with zarith.
    replace ((Length_0 - 1 - k_0)%Z) with ((63 - (63 - (Length_0 - 1 - k_0)))%Z) by omega.    
    apply H32; auto with zarith.
    replace (63 - (63 - (Length_0 - 1 - k_0)))%Z with ((Length_0 - 1 - k_0)%Z) by omega.
    assumption.
  
  - (* equal *)
    rewrite equal in *.
    apply H30.
    apply H26.
    assumption.
    
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_normal_case_post_2.
Hint Bitwalker_Peek,normal_case,property.
Proof.
  auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_2_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.

  remember Start_0 as Start.
  remember Length_0 as Length.
  remember Bitstream_0 as Bitstream.
  remember Value_0 as Value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  unfold is_uint32 in *.

  subst a_0 a_1 x_0 x_1 x_2 x_3 x_4 x_5 x_6.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
    subst x_8.
    subst x_2.
    apply H37; auto with zarith.
      unfold is_uint32 in H14.
      auto with zarith.

  * (* k = i*)
    subst x_8.
    subst x_5 x_6 x_7.
    subst x_2.
    rewrite equal in *.
    auto with zarith.
     
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_3_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.

  remember Start_0 as Start.
  remember Length_0 as Length.
  remember Bitstream_0 as Bitstream.
  remember Value_0 as Value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_1 x_2 x_3 x_5 x_6 x_7.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
   rewrite H42; auto with zarith.

  * (* k = i *)
   rewrite equal in *.
   rewrite <- H32.
   rewrite H38.
   tauto.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_4_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.
  
  remember Start_0 as Start.
  remember Length_0 as Length.
  remember Bitstream_0 as Bitstream.
  remember Value_0 as Value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_2 x_3 x_5 x_6 x_7 x_8.
  unfold is_uint32 in *.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
    apply H39; auto with zarith.

  * (* k = i *)
    rewrite equal in *.
    auto with zarith.

Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_5_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.

  remember Start_0 as Start.
  remember Length_0 as Length.
  remember Bitstream_0 as Bitstream.
  remember Value_0 as Value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_2 x_3 x_5 x_6 x_7 x_8.
  unfold is_uint32 in *.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
    apply H44; auto with zarith.

  * (* k = i *)
    rewrite equal in *.
    auto with zarith.

Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_normal_case_post_3.
Hint Bitwalker_Poke,normal_case,property.
Proof.
  intros.

  subst x_0 x_1 x_2 x_3.
  unfold is_uint32 in *.
  subst a_1.
  rewrite H20; auto with zarith.
Qed.

Goal typed_ref_BitTest_PeekBitInStream_post.
Hint PeekBitInStream,default,property.
Proof.
  intros.
  subst a_0 x_0 x_1 x_2 x_3 x_4 x_5.
  unfold bit_test.
  unfold to_uint8 in *.
  auto with zarith.
Qed.

Goal typed_ref_BitTest_PeekThenPoke_assert.
Hint PeekThenPoke,property.
Proof.
  intros.
  admit. (* used to apply lemma BitsAndMore from Bits.h *)
Qed.

Goal typed_ref_BitTest_PeekThenPoke_assert_2.
Hint PeekThenPoke,property.
Proof.
  intros.
  unfold is_uint32 in *.
  subst x_0 x_1 x_2 a_1.

  replace (i_0) with ((Start_0 + (i_0 - Start_0))%Z) by omega.

  rewrite <- H20; auto with zarith.
  rewrite <- H19; auto with zarith.
  intuition.

Qed.

Goal typed_ref_BitTest_PokeBit8Array_assert.
Hint PokeBit8Array,property.
Proof.
  intros.
  subst x_0 x_1 x_2 x_3 x_4.
  rewrite H18; auto with zarith.
  subst a_0.
  assert(i_0 = Cdiv left_bit_0 8).
  auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeBit8Array_assert_2.
Hint PokeBit8Array,property.
Proof.
  intros.
  subst x_0 x_1 x_2 x_3 x_4.
  subst a_0.
  replace (i_0) with (Cdiv left_bit_0 8).
  rewrite H18; auto with zarith.
  tauto.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert.
Hint PokeThenPeek,property.
Proof.
 intros.
 admit. (* used to apply lemma BitsAndMore from Bits.h *)
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_3.
Hint PokeThenPeek,property.
Proof.
  intros.
  subst x_1 x_2.

  replace ((63 - i_0)%Z) with ((Length_0 - 1 - (Length_0 + i_0 - 64))%Z) in * by omega.

  rewrite H22; auto with zarith.

Qed.

Goal typed_ref_BitTest_PokeThenPeek_post.
Hint PokeThenPeek,default,property.
Proof.
  intros.
  admit. (* apply Q_BitsAndEquality; assumption. *)
Qed.

Goal typed_ref_BitTest_SetBit64Left_post_3.
Hint SetBit64Left,default,property.
Proof.
  intros.
  subst x_1 x_2 x_3 x_4.
  auto with zarith.
Qed.


