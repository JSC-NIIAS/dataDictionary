(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_Bitstream_ReadInt32_assert.
Hint Bitstream_ReadInt32,property.
Proof.
  intros.
  subst x_1 x_2 x_3 x_4.
  auto with zarith.

Qed.

Goal typed_ref_BitTest_Bitstream_ReadInt32_assert_rte_signed_downcast.
Hint Bitstream_ReadInt32,property,rte,signed_downcast.
Proof.
  intros.
Qed.

Goal typed_ref_BitTest_Bitstream_ReadInt32_normal_case_post_2.
Hint Bitstream_ReadInt32,normal_case,property.
Proof.
  intros.
  unfold is_uint64 in *.

  replace (to_sint32 Bitstream_Read_0) with Bitstream_Read_0.

  replace (31 - i_0)%Z with (63 - (32 + i_0))%Z by omega.

  apply H18; auto with zarith.

  symmetry.
  apply id_sint32.

  unfold is_sint32.
  auto with zarith.

Qed.

Goal typed_ref_BitTest_Bitstream_Read_normal_case_post.
Hint Bitstream_Read,normal_case,property.
Proof.
  intros.

  unfold is_uint32 in *.
  unfold is_uint64 in *.

  rewrite H22; auto with zarith.

  replace ((Mint_0.[a_1 <- x_3]).[shift a_3 (Cdiv x_4 8)]) with (Mint_0.[shift a_3 (Cdiv x_4 8)]).
  tauto.

  rewrite access_update_neq.
  auto.

  subst a_0 a_1 a_2 a_3.
  subst x_0 x_1 x_2 x_3 x_4.

  unfold P_BitstreamInvariant in *.
  destruct H9 as [A [B C]].

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0.[stream_0]) as addr.
  remember (Mint_0.[shift stream_0 1]) as size.
  remember (Mint_0.[shift stream_0 2]) as bitpos.

  apply separated_sym in C.
  apply separated_neq with (stream_0) (3%Z) (addr) (size).
  assumption.
  unfold included; simpl; auto with zarith.

  assert(0 <= (Cdiv (i_0 + bitpos) 8) < size)%Z.
    apply Cdiv_bounds; auto with zarith.
  
  unfold included; simpl; auto with zarith.

Qed.

Goal typed_ref_BitTest_Bitstream_Write_normal_case_post_3.
Hint Bitstream_Write,normal_case,property.
Proof.
  intros.

  subst x_2 x_3 x_4 x_5 x_6.
  subst a_0 a_1 a_2 a_3 a_4.
  unfold is_uint32 in *.

  remember i_0 as i.
  remember x_0 as NewPosition.
  remember x_1 as OldPosition.
  rewrite access_update_neq.
  apply H27; auto with zarith.

  unfold P_BitstreamInvariant in *.
  destruct H10 as [A [B C]].

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  apply separated_sym in C.
  apply separated_neq with (stream_0) (3%Z) (Mptr_0 .[stream_0]) (Mint_0 .[ shift stream_0 1]).
  exact C.
  unfold included; simpl; auto with zarith.

  remember (Mptr_0.[stream_0]) as addr.
  remember (Mint_0.[shift stream_0 1]) as size.

  assert ((0 <= (Cdiv (i + OldPosition) 8) < size)%Z) by  admit.

  unfold included; simpl; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_loop_inv_2_preserved.
Hint Bitwalker_Peek,preserved.
Proof.
  intros.

  subst x_1 x_2 x_3 x_4 x_5.

  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.

  assert(non_strict: (k_0 <= i_0)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  - (* less *)
    rewrite <- H33; auto with zarith.
    replace ((length_0 - 1 - k_0)%Z) with ((63 - (63 - (length_0 - 1 - k_0)))%Z) by omega.
    rewrite H31; auto with zarith.
    tauto.

  - (* equal *)
    rewrite equal in *.
    rewrite <- H25.
    rewrite H29.
    tauto.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_loop_inv_3_preserved.
Hint Bitwalker_Peek,preserved.
Proof.
  intros.

  subst x_1 x_2 x_3 x_4 x_5.

  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.

  assert(non_strict: (k_0 <= i_0)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  - (* less *)
    apply H35; auto with zarith.
    replace ((length_0 - 1 - k_0)%Z) with ((63 - (63 - (length_0 - 1 - k_0)))%Z) by omega.    
    apply H32; auto with zarith.
    replace (63 - (63 - (length_0 - 1 - k_0)))%Z with ((length_0 - 1 - k_0)%Z) by omega.
    assumption.
  
  - (* equal *)
    rewrite equal in *.
    apply H30.
    apply H26.
    assumption.
    
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_normal_case_post_2.
Hint Bitwalker_Peek,normal_case,property.
Proof.
  auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_normal_case_post_3.
Hint Bitwalker_Peek,normal_case,property.
Proof.
  intros.
  unfold is_uint64 in *.
  apply bits_and_bounds; auto with zarith.
  intros.
  replace (k) with (63 - (63 - k))%Z by omega.
  apply H17; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_2_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember Value_0 as Value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  unfold is_uint32 in *.

  subst a_0 a_1 x_0 x_1 x_2 x_3 x_4 x_5 x_6.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
    subst x_8.
    subst x_2.
    apply H37; auto with zarith.
      unfold is_uint32 in H14.
      auto with zarith.

  * (* k = i*)
    subst x_8.
    subst x_5 x_6 x_7.
    subst x_2.
    rewrite equal in *.
    auto with zarith.
     
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_3_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember value_0 as value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_1 x_2 x_3 x_5 x_6 x_7.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
   rewrite H42; auto with zarith.

  * (* k = i *)
   rewrite equal in *.
   rewrite <- H32.
   rewrite H38.
   tauto.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_4_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.
  
  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember Value_0 as Value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_2 x_3 x_5 x_6 x_7 x_8.
  unfold is_uint32 in *.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
    apply H39; auto with zarith.

  * (* k = i *)
    rewrite equal in *.
    auto with zarith.

Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_5_preserved.
Hint Bitwalker_Poke,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember Value_0 as Value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_2 x_3 x_5 x_6 x_7 x_8.
  unfold is_uint32 in *.

  assert(non_strict: (k <= i)%Z) by assumption.
    apply Zle_lt_or_eq in non_strict.
  destruct non_strict as [less | equal].

  * (* k < i *)
    apply H44; auto with zarith.

  * (* k = i *)
    rewrite equal in *.
    auto with zarith.

Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_normal_case_post_3.
Hint Bitwalker_Poke,normal_case,property.
Proof.
  intros.

  subst x_0 x_1 x_2 x_3.
  unfold is_uint32 in *.
  subst a_1.
  rewrite H20; auto with zarith.
Qed.

Goal typed_ref_BitTest_PeekBitInStream_post.
Hint PeekBitInStream,default,property.
Proof.
  intros.
  subst a_0 x_0 x_1 x_2 x_3 x_4 x_5.
  unfold bit_test.
  unfold to_uint8 in *.
  auto with zarith.
Qed.

Goal typed_ref_BitTest_PeekThenPoke_assert.
Hint PeekThenPoke,property.
Proof.
  intros.
  unfold is_uint32 in *.
  subst x_0 x_1 x_2 a_1.

  replace (i_0) with (((i_0 - start_0) + start_0)%Z) by omega.

  rewrite <- H21; auto with zarith.
Qed.

Goal typed_ref_BitTest_PeekThenPoke_assert_2.
Hint PeekThenPoke,property.
Proof.
  intros.
  unfold is_uint32 in *.
  subst x_0 x_1 x_2 a_1.

  replace (i_0) with ((start_0 + (i_0 - start_0))%Z) by omega.

  rewrite <- H20; auto with zarith.
  rewrite <- H19; auto with zarith.
  intuition.

Qed.

Goal typed_ref_BitTest_PokeBit8Array_assert.
Hint PokeBit8Array,property.
Proof.
  intros.
  subst x_0 x_1 x_2 x_3 x_4.
  rewrite H18; auto with zarith.
  subst a_0.
  assert(i_0 = Cdiv left_bit_0 8).
  auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeBit8Array_assert_2.
Hint PokeBit8Array,property.
Proof.
  intros.
  subst x_0 x_1 x_2 x_3 x_4.
  subst a_0.
  replace (i_0) with (Cdiv left_index_0 8).
  rewrite H18; auto with zarith.
  tauto.
  symmetry.
  auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeBit8_post_3.
Hint PokeBit8,default,property.
Proof.
  intros.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert.
Hint PokeThenPeek,property.
Proof.
 intros.
 rewrite bits_and_bounds in H8.
 apply H8; auto with zarith.
 unfold is_uint64 in *.
 auto with zarith.
 assumption.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_3.
Hint PokeThenPeek,property.
Proof.
  intros.
  subst x_1 x_2 x_3.

  replace ((63 - i_0)%Z) with ((length_0 - 1 - (length_0 + i_0 - 64))%Z) in * by omega.

  rewrite H23; auto with zarith.

Qed.

Goal typed_ref_BitTest_PokeThenPeek_post.
Hint PokeThenPeek,default,property.
Proof.
  intros.
  admit. (* apply Q_BitsAndEquality; assumption. *)
Qed.


