(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_Bitstream_Write_normal_case_post_copied.
Hint Bitstream_Write,copied,normal_case,property.
Proof.
  intros.
  unfold P_BitstreamEqual64 in *.
  unfold P_NormalBitsequence in *.
  unfold P_LeftBitInStream.
  unfold P_BitstreamInvariant in *.
  unfold is_uint32 in *.

  intros.

  subst x_0 x_1 x_2 x_3 x_4 x_5.
  subst a_0 a_1 a_2 a_3 a_4.


  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember i_0 as i.
  remember stream_0 as stream.
  remember length_0 as length.
  remember (Mptr_0.[stream]) as addr.
  remember (Mint_0.[shift stream 1]) as size.
  remember (Mint_0.[shift stream 2]) as bitpos.
  remember (Mint_1.[shift stream 2]) as new_bitpos.
  rewrite H8 in *.
 
  rewrite access_update_neq.
  + apply H29; auto with zarith.

  +
    destruct H9 as [A [B C]].
    clear H27 H28 H29. (* simplify proof context *)
    apply separated_neq with (stream) (3%Z) (addr) (size).
    - assumption.
    - unfold included; simpl; omega.

    - assert ((0 <= (Cdiv i 8) < size)%Z).
      apply Cdiv_bounds; omega.
      unfold included; simpl; omega.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_loop_inv_copied_preserved.
Hint Bitwalker_Peek,copied,preserved.
Proof.
  intros.

  subst x_0 x_1 x_2 x_3 x_4.

  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.

  case_lt k_0 (i_0 + start_0)%Z.

  - (* less *)
    intros less.
    rewrite <- H32; auto with zarith.
    replace ((length_0 + start_0 - 1 - k_0)%Z) with ((63 - (63 - (length_0 + start_0 - 1 - k_0)))%Z) by omega.
    apply H31; auto with zarith.

  - (* equal *)
    intros.
    assert(equal: (k_0 = i_0 + start_0)%Z) by auto with zarith.
    rewrite equal in *.
    replace (length_0 + start_0 - 1 - (i_0 + start_0))%Z with (length_0 - 1 - i_0)%Z by omega.
    rewrite <- H26.
    assumption.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_loop_inv_not_set_preserved.
Hint Bitwalker_Peek,not_set,preserved.
Proof.
  intros.

  subst x_0 x_1 x_2 x_3 x_4.

  unfold is_uint8 in *.
  unfold is_uint32 in *.
  unfold is_uint64 in *.

  unfold P_UpperBitsNotSet in *.
  
  intros.
  assert(i_1 < 64 \/ ~(i_1 < 64))%Z by tauto.
  assert(length_0 <= i_1 < 64 \/ 64 <= i_1)%Z.
    - destruct H31 as [leq | gt].
      + left; auto with zarith.
      + right; auto with zarith.
    -
      destruct H31 as [left | right].
      + replace (i_1)%Z with (63 - (63 - i_1))%Z by omega.
        rewrite H28; auto with zarith.
      + apply to_uint64_extraction_sup; auto with zarith.
        
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_normal_case_post_3.
Hint Bitwalker_Peek,normal_case,property.
Proof.
  intros.
  unfold is_uint64 in *.
  apply bits_and_bounds_uint; auto with zarith.
  intros.
  replace (k) with (63 - (63 - k))%Z by omega.
  apply H16; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_normal_case_post_3_part2.
Hint Bitwalker_Peek,normal_case,part-1,property.
Proof.
  intros.
  unfold is_uint64 in *.
  apply bits_and_bounds_uint; auto with zarith.
  intros.
  replace (k) with (63 - (63 - k))%Z by omega.
  apply H16; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Peek_normal_case_post_valid_result_part2.
Hint Bitwalker_Peek,normal_case,part-1,property,valid_result.
Proof.
  intros.
  unfold is_uint64 in *.
  apply bits_and_bounds_uint; auto with zarith.

  intros.

  assert (k < 64 \/ k >= 64)%Z by omega.
  assert(lower_upper: (length_0 <= k < 64  \/  64 <= k)%Z).
    destruct H19 as [lower_64 | upper_64].
    left. omega. 
    right. omega.

  unfold P_UpperBitsNotSet64 in *.

  destruct lower_upper as [lower | upper].
  +   apply H11; auto with zarith.
  +   apply to_uint64_extraction_sup; auto with zarith.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_copied_preserved.
Hint Bitwalker_Poke,copied,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember value_0 as value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_1 x_2 x_3 x_4 x_5.
  unfold is_uint64 in *.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.

  case_lt k (i + start)%Z.
  * 
   intros.
   rewrite H35; auto with zarith.
   symmetry.
   apply H38; auto with zarith.

  * 
   intros.
   assert(equal: (k = i + start)%Z) by omega.
   rewrite equal in *.
   rewrite <- H33; auto with zarith.
   replace (length + start - 1 - (i + start))%Z  with  (length - 1 - i)%Z by omega.
   symmetry.
   assumption.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_copied_preserved_part1.
Hint Bitwalker_Poke,copied,part-0,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember value_0 as value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_1 x_2 x_3 x_4 x_5.
  unfold is_uint64 in *.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.

  case_lt k (i + start)%Z.

  * (* k < i + start *)
    intros.
    rewrite H38; auto with zarith.

  * (* k = i + start *)
   intros.
   assert(equal: (k = i + start)%Z) by omega. 
   rewrite equal in *.
   replace (length + start - 1 - (i + start))%Z
     with  (length - 1 - i)%Z by omega.
   rewrite <- H29.
   assumption.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_loop_inv_copied_preserved_part2.
Hint Bitwalker_Poke,copied,part-1,preserved.
Proof.
  intros.

  remember start_0 as start.
  remember length_0 as length.
  remember addr_0 as addr.
  remember value_0 as value.
  remember Mint_0 as M0.
  remember Mint_1 as M1.
  remember Mint_2 as M2.

  remember k_0 as k.
  remember i_0 as i.

  subst x_0 x_1 x_2 x_3 x_4.
  unfold is_uint64 in *.
  unfold is_uint32 in *.
  unfold  to_sint32 in *.

  case_lt k (i + start)%Z.
  * 
   intros.
   rewrite H32; auto with zarith.
   symmetry.
   apply H35; auto with zarith.

  * 
   intros.
   assert(equal: (k = i + start)%Z) by omega.
   rewrite equal in *.
   rewrite <- H30; auto with zarith.
   replace (63 + start - (i + start))%Z  with  (63 - i)%Z by omega.
   symmetry.
   assumption.
Qed.

Goal typed_ref_BitTest_Bitwalker_Poke_normal_case_post_3.
Hint Bitwalker_Poke,normal_case,property.
Proof.
  intros.

  subst x_0 x_1 x_2 x_3.
  unfold is_uint32 in *.
  subst a_1.
  rewrite H20; auto with zarith.
Qed.

Goal typed_ref_BitTest_PeekBitInStream_post.
Hint PeekBitInStream,default,property.
Proof.
  intros.
  subst a_0 x_0 x_1 x_2 x_3 x_4 x_5.
  unfold bit_test.
  unfold to_uint8 in *.
  auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_bits_covered.
Hint PokeThenPeek,bits_covered,property.
Proof.
 intros.
 unfold is_uint32 in *.
 unfold is_uint64 in *.
 rewrite bits_and_bounds_uint in H7; auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_full_copy2.
Hint PokeThenPeek,full_copy2,property.
Proof.
  intros.
  replace (i_0)%Z with (63 - (63 - i_0))%Z by omega.
  apply H18; auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_assert_partial_copy.
Hint PokeThenPeek,partial_copy,property.
Proof.
  intros.
  subst x_1 x_2.

  replace (63 - i_0)%Z  with
        (length_0 + start_0 - 1 - (length_0 + start_0 + i_0 - 64))%Z by omega.
  rewrite H18; auto with zarith.
  rewrite <- H19; auto with zarith.
  reflexivity.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_post_result.
Hint PokeThenPeek,default,property,result.
Proof.
  intros.
  apply bits_equal_uint64; auto with zarith.
Qed.

Goal typed_ref_BitTest_PokeThenPeek_post_result_value.
Hint PokeThenPeek,default,property,result_value.
Proof.
  intros.
  apply bits_equal_uint64; auto with zarith.
Qed.

Goal typed_ref_BitTest_ReadThenWrite_assert_copied.
Hint ReadThenWrite,copied,property.
Proof.
  intros.
  unfold P_BitstreamEqual64 in *.
  unfold P_NormalBitsequence in *.
  subst a_0 a_1.
  subst x_0 x_1.

  remember (Mint_0 .[ shift stream_0 2]) as bitpos.
  remember (Mint_0 .[ shift stream_0 1]) as size.

  apply H15.

  subst m_0.
  rewrite access_update in *.
  assert((Mint_0 .[ shift stream_0 2 <- v_0]) .[ shift stream_0 1] = Mint_0.[ shift stream_0 1]).
    rewrite access_update_neq; auto with zarith.
    admit.
  rewrite H17 in *.
  rewrite <- Heqsize in *.

  unfold is_uint32 in *.
  intuition.
  auto with zarith.

  rewrite access_update in *.
Qed.

Goal typed_ref_BitTest_ReadThenWrite_assert_copied1.
Hint ReadThenWrite,copied1,property.
Proof.
  intros.
  unfold P_BitstreamEqual64 in *.
  unfold P_NormalBitsequence in *.
  subst a_0 a_1.
  subst x_0 x_1.

  remember (Mint_0 .[ shift stream_0 2]) as bitpos.
  remember (Mint_0 .[ shift stream_0 1]) as size.

  apply H18.

  subst m_0.
  rewrite access_update in *.
  assert((Mint_0 .[ shift stream_0 2 <- v_0]) .[ shift stream_0 1] = Mint_0.[ shift stream_0 1]).
    rewrite access_update_neq; auto with zarith.
    intuition.
    apply shift_injective in H20.
    intuition.
  rewrite <- Heqsize in *.
  rewrite H20 in *.

  unfold is_uint32 in *.
  intuition.

Qed.

Goal typed_ref_BitTest_ReadThenWrite_assert_copied2.
Hint ReadThenWrite,copied2,property.
Proof.
  intros.
  unfold P_BitstreamEqual64 in *.
  subst a_0 a_1.
  subst x_0 x_1.
  remember x_2 as length.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  intros.
  rewrite <- H18; auto with zarith.

  subst m_1.
  unfold P_LeftBitInStream in *.



  assert((Mint_1 .[ shift stream_0 2 <- v_0]) = (Mint_0 .[ shift stream_0 2 <- v_0]).
Qed.

Goal typed_ref_BitTest_ReadThenWrite_assert_copied_2.
Hint ReadThenWrite,copied,property.
Proof.
  intros.
  subst x_0 x_1 x_2 x_3 x_4.
  subst a_1.

  unfold P_BitstreamEqual64 in *.
  intros.

  apply H29; auto with zarith.
Qed.

Goal typed_ref_BitTest_ReadThenWrite_assert_result_bound.
Hint ReadThenWrite,property,result_bound.
Proof.
  intros.

  unfold P_NormalBitsequence in *.
  subst a_0 a_1.
  subst x_0 x_1 x_2 x_3.

  remember (Mint_0.[ shift stream_0 1]) as size_0.
  remember (Mint_0.[ shift stream_0 2]) as bitpos_0.
 
  remember (m_0.[ shift stream_0 1]) as size_1.
  remember (m_0.[ shift stream_0 2]) as bitpos_1.

  assert(L: v_0 = bitpos_1).
    admit.
  rewrite L in *.

  remember (bitpos_1 - bitpos_0)%Z as length.
Qed.

Goal typed_ref_BitTest_ReadThenWrite_stmt_assign_part3.
Hint *,ReadThenWrite,default,part-2,result,stmt-assigns,stream.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_BitTest_ReadThenWrite_stmt_post_2.
Hint ReadThenWrite,default,property.
Proof.
  intros.

  unfold P_NormalBitsequence in *.
  rewrite shift_zero in *.
  rewrite shift_zero in *.
  subst a_0 a_1.
  subst x_1 x_2 x_3 x_4 x_5.
  remember x_0 as addr.

  remember (Mint_0.[ shift stream_0 1]) as size_0.
  remember (Mint_0.[ shift stream_0 2]) as bitpos_0.
 
  remember (m_0.[ shift stream_0 1]) as size_1.
  remember (m_0.[ shift stream_0 2]) as bitpos_1.

  remember (m_1.[ shift stream_0 1]) as size_2.
  remember (m_1.[ shift stream_0 2]) as bitpos_2.

  assert(L: v_0 = bitpos_1).
    admit.
  rewrite L in *.

  remember (bitpos_1 - bitpos_0)%Z as length.

  apply H27.
Qed.

Goal typed_ref_BitTest_ReadThenWrite_stmt_post_copied.
Hint ReadThenWrite,copied,default,property.
Proof.
(* --------------------------------------
  
From 'typed_ref_BitTest_ReadThenWrite_stmt_post_2': 
  intros.

  unfold P_NormalBitsequence in *.
  rewrite shift_zero in *.
  rewrite shift_zero in *.
  subst a_0 a_1.
  subst x_1 x_2 x_3 x_4 x_5.
  remember x_0 as addr.

  remember (Mint_0.[ shift stream_0 1]) as size_0.
  remember (Mint_0.[ shift stream_0 2]) as bitpos_0.
 
  remember (m_0.[ shift stream_0 1]) as size_1.
  remember (m_0.[ shift stream_0 2]) as bitpos_1.

  remember (m_1.[ shift stream_0 1]) as size_2.
  remember (m_1.[ shift stream_0 2]) as bitpos_2.

  assert(L: v_0 = bitpos_1).
    admit.
  rewrite L in *.

  remember (bitpos_1 - bitpos_0)%Z as length.

  apply H27.
*)
(* --------------------------------------
  
From 'typed_ref_BitTest_ReadThenWrite_stmt_post_valid_result': 
  intros.
  unfold P_NormalBitsequence in *.
  subst a_0.
  subst x_0 x_1 x_2.

  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as bitpos.

  assert(m_0 .[ shift stream_0 2] = v_0).
    subst m_0.
    rewrite access_update; reflexivity.
  rewrite H16 in *.

  assert(m_0 .[ shift stream_0 1] = size).
    subst m_0.
    rewrite access_update_neq; auto.
    intuition.
    apply shift_injective in H17.
    intuition.
  rewrite H17 in *.

  apply H14.
  remember v_0 as new_bitpos.
  remember (new_bitpos - bitpos)%Z as length.
  auto with zarith.

*)
Qed.

Goal typed_ref_BitTest_ReadThenWrite_stmt_post_increment.
Hint ReadThenWrite,default,increment,property.
Proof.
  intros.
  subst x_0 x_1.
  auto with zarith.
Qed.

Goal typed_ref_BitTest_ReadThenWrite_stmt_post_valid_result.
Hint ReadThenWrite,default,property,valid_result.
Proof.
  intros.
  unfold is_uint32 in *.
  unfold is_uint64 in *.

  unfold P_NormalBitsequence in *.
  subst a_0.
  subst x_0 x_1 x_2.

  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as bitpos.

  assert(m_0 .[ shift stream_0 2] = v_0).
    subst m_0.
    rewrite access_update; reflexivity.
  rewrite H16 in *.

  assert(m_0 .[ shift stream_0 1] = size).
    subst m_0.
    rewrite access_update_neq; auto.
    intuition.
    apply shift_injective in H17.
    intuition.
  rewrite H17 in *.

  remember v_0 as new_bitpos.
  remember (new_bitpos - bitpos)%Z as length.
  replace (64 + bitpos - new_bitpos)%Z with (64 - length)%Z in * by omega.

  apply bits_and_bounds_uint; auto with zarith.
  unfold P_LeftNotSet64 in *.
  intros.
  replace k%Z with (63 - (63 - k))%Z by omega.
  apply H12; auto with zarith.

Qed.

Goal typed_ref_BitTest_UpperBitsNotSet64_post.
Hint UpperBitsNotSet64,default,property.
Proof.
(* --------------------------------------
  
From 'typed_ref_BitTest_UpperBitsNotSet64_post_part2': 
  intros.
  unfold is_uint64 in *.
  unfold P_UpperBitsNotSet.
  apply bits_and_bounds_uint; auto with zarith.
  rewrite is_uint64_lsl1_inf in H4; omega.
*)
(* --------------------------------------
  
From 'typed_ref_BitTest_UpperBitsNotSet64_post_part1': 
  intros.
  unfold is_uint64 in *.
  unfold P_UpperBitsNotSet.
  rewrite is_uint64_lsl1_inf in H4; auto with zarith.
  intuition.
  assert (X: (forall i_0 : int, (length_0 <= i_0)%Z -> ~ bit_test value_0 i_0)) by auto with zarith.
  rewrite <- bits_and_bounds_uint in X; auto with zarith.
*)
Qed.

Goal typed_ref_BitTest_UpperBitsNotSet64_post_part1.
Hint UpperBitsNotSet64,default,part-0,property.
Proof.
  intros.
  unfold is_uint64 in *.
  unfold P_UpperBitsNotSet.
  rewrite is_uint64_lsl1_inf in H4; auto with zarith.
  intuition.
  assert (X: (forall i_0 : int, (length_0 <= i_0)%Z -> ~ bit_test value_0 i_0)) by auto with zarith.
  rewrite <- bits_and_bounds_uint in X; auto with zarith.
Qed.

Goal typed_ref_BitTest_UpperBitsNotSet64_post_part2.
Hint UpperBitsNotSet64,default,part-1,property.
Proof.
  intros.
  unfold is_uint64 in *.
  unfold P_UpperBitsNotSet.
  apply bits_and_bounds_uint; auto with zarith.
  rewrite is_uint64_lsl1_inf in H4; omega.
Qed.


