(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_Package_Foo_Encoder_stmt_post_DEF_equal.
Hint DEF_equal,Package_Foo_Encoder,default,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.

  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  rewrite H31 in *.
  replace (8 + pos - pos)%Z with 8%Z in * by omega.
  replace (3 + (8 + pos))%Z with (11 + pos)%Z in * by omega.
  replace (8 + pos + (11 + pos - (8 + pos)))%Z with (11 + pos)%Z in * by omega.

  unfold is_uint32 in *.
  unfold is_uint64 in *.

  rewrite H9 in *.

  clear H42.
  rewrite <- H43; auto with zarith.


  assert (X2_0: Mint_2 .[shift p_0 1] = Mint_1 .[shift p_0 1]).
  + apply H39.
    apply separated_trans with (p_0) (3).
    unfold included; simpl; auto with zarith.
    apply separated_sym; assumption.
  + rewrite X2_0 in *.
    rewrite access_update_neq.
    * rewrite H43; auto with zarith.
      reflexivity.
    * apply separated_neq with (stream_0) (3) (p_0) (3).
      assumption.
      unfold included; simpl; auto with zarith.
      unfold included; simpl; auto with zarith.
Qed.

Goal typed_ref_BitTest_Package_Foo_Encoder_stmt_post_GHI_equal.
Hint GHI_equal,Package_Foo_Encoder,default,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  rewrite H40 in *.
  rewrite H39 in *.
  replace (3 + (8 + pos)) with (11 + pos) in * by omega.
  replace (17 + (11 + pos)) with (28 + pos) in * by omega.
  replace (8 + pos + (11 + pos - (8 + pos))) with (11 + pos) in * by omega.
  replace (11 + pos + (28 + pos - (11 + pos))) with (28 + pos) in * by omega. 
  replace (8 + pos - pos) with 8 in * by omega.

  rewrite H10 in *.
  rewrite H11 in *.

  rewrite <- H55; auto with zarith.

  rewrite access_update_neq.

  assert(X3_2: Mint_3 .[ shift p_0 2] = Mint_2 .[ shift p_0 2]).
    apply H47.
    apply separated_trans with (p_0) (3).
    unfold included; simpl; auto with zarith.
    apply separated_sym; assumption.
  rewrite X3_2.
  reflexivity.

  apply separated_neq with (stream_0) (3) (p_0) (3).
  assumption.
  unfold included; simpl; auto with zarith.
  unfold included; simpl; auto with zarith.
Qed.


