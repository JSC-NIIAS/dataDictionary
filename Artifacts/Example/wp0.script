(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_Package_Foo_Encoder_stmt_post_DEF_equal.
Hint DEF_equal,Package_Foo_Encoder,default,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  rewrite H33 in *.
  replace (8 + pos - pos)%Z with 8%Z in * by omega.
  replace (3 + (8 + pos))%Z with (11 + pos)%Z in * by omega.
  replace (8 + pos + (11 + pos - (8 + pos)))%Z with (11 + pos)%Z in * by omega.

  unfold is_uint32 in *.
  unfold is_uint64 in *.

  assert (Mint_2 .[ shift stream_0 1] = Mint_0.[shift stream_0 1]).
  - assert (Mint_0 .[ shift stream_0 2 <- v_0].[shift stream_0 1] = Mint_0.[shift stream_0 1]).
    + rewrite access_update_neq.
      * reflexivity.
      * apply shift_different; omega.
    + assert(Mint_0 .[ shift stream_0 2 <- v_0].[shift stream_0 1] = Mint_2.[shift stream_0 1]).
      * apply H41.
        apply separated_trans with (stream_0) (3).
        unfold included; simpl; auto with zarith.
        assumption.
      * rewrite <- H46.
        rewrite <- H47.
        auto.

  - rewrite H46 in *.
    rewrite <- Heqsize in *.

    assert (Mint_2 .[shift p_0 1] = Mint_1 .[shift p_0 1]).
    + apply H40.
      apply separated_trans with (p_0) (3).
      unfold included; simpl; auto with zarith.
      apply separated_sym; assumption.
    + rewrite H47 in *.

      rewrite access_update_neq.
      * rewrite H43; auto with zarith.
        reflexivity.
      * apply separated_neq with (stream_0) (3) (p_0) (3).
        assumption.
        unfold included; simpl; auto with zarith.
        unfold included; simpl; auto with zarith.
Qed.

Goal typed_ref_BitTest_Package_Foo_Encoder_stmt_post_GHI_equal.
Hint GHI_equal,Package_Foo_Encoder,default,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  unfold P_BitstreamInvariant in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  rewrite H41 in *.
  rewrite H42 in *.
  replace (17 + (3 + (8 + pos)))%Z with (28 + pos)%Z in * by omega.
  replace (3 + (8 + pos) + (28 + pos - (3 + (8 + pos))))%Z with (28 + pos)%Z in * by omega.
  replace (8 + pos - pos)%Z with 8%Z in * by omega.
  replace (11 + pos + (28 + pos - (11 + pos)))%Z with (28 + pos)%Z in * by omega.
  replace (8 + pos + (11 + pos - (8 + pos)))%Z with (11 + pos)%Z in * by omega.
  replace (3 + (8 + pos))%Z with (11 + pos)%Z in * by omega.

  assert (X0: Mint_0.[ shift stream_0 2 <- v_1].[ shift stream_0 1] = Mint_0.[shift stream_0 1]).
    rewrite access_update_neq.
    reflexivity.
    apply shift_different; omega.

  assert (X0_1: (Mint_0.[shift stream_0 2 <- v_1]).[ shift stream_0 1] = Mint_1.[shift stream_0 1]).
    apply H52.
    apply separated_trans with (stream_0) (3).
    unfold included; simpl; auto with zarith.
    assumption.
  rewrite X0 in X0_1.
  rewrite <- Heqsize in X0_1.
  rewrite <- X0_1 in *.


  assert (X1: Mint_1.[ shift stream_0 2 <- v_0].[ shift stream_0 1] = Mint_1.[shift stream_0 1]).
    rewrite access_update_neq.
    reflexivity.
    apply shift_different; omega.

  assert (X1_3: Mint_1.[ shift stream_0 2 <- v_0].[ shift stream_0 1] = Mint_3.[shift stream_0 1]).
    apply H51.
    apply separated_trans with (stream_0) (3).
    unfold included; simpl; auto with zarith.
    assumption.
  rewrite X1 in X1_3.
  rewrite <- X0_1 in X1_3.
  rewrite <- X1_3 in *.

  rewrite <- H55; auto with zarith.

  rewrite access_update_neq.

  assert(X3_2: Mint_3 .[ shift p_0 2] = Mint_2 .[ shift p_0 2]).
    apply H50.
    apply separated_trans with (p_0) (3).
    unfold included; simpl; auto with zarith.
    apply separated_sym; assumption.
  rewrite X3_2.
  reflexivity.

  apply separated_neq with (stream_0) (3) (p_0) (3).
  assumption.
  unfold included; simpl; auto with zarith.
  unfold included; simpl; auto with zarith.
Qed.


