(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_Package_Foo_Decoder_assert.
Hint Package_Foo_Decoder,property.
Proof.
  intros.
  subst a_0 a_1 a_2.
  subst x_0 x_1 x_2 x_3 x_4.

  subst m_0.
  rewrite access_update_neq.
Qed.

Goal typed_ref_BitTest_Package_Foo_Decoder_assert_2.
Hint Package_Foo_Decoder,property.
Proof.
  intros.
  subst a_0 a_1 a_2.
  subst x_0 x_1 x_2 x_3 x_4 x_5.

  unfold P_BitstreamEqual64 in *.
  intros.
  subst m_1.
  rewrite access_update_neq.
  subst m_0.
  rewrite access_update in *.
  remember (Mint_0 .[ shift stream_0 2]) as pos.
  rewrite <- H33 in *.
  replace (8 + pos - 8)%Z with pos%Z by omega.

  assert((Mint_0 .[ shift stream_0 2 <- 8 + pos]) .[ shift p_0 0 <- v_0] = v_0)%Z.
    rewrite <- access_update_neq.

  apply H37. auto with zarith.


    rewrite -> access_update_neq.
    - apply H47.
 unfold P_LeftBitInStream in *.
Qed.

Goal typed_ref_BitTest_Package_Foo_Decoder_assert_3.
Hint Package_Foo_Decoder,property.
Proof.
  intros.
  subst a_0 a_1 a_2.
  subst x_0 x_1 x_2 x_3 x_4 x_5.

  unfold is_uint32 in *.
  unfold is_uint64 in *.
  rewrite shift_zero in *.

  unfold P_BitstreamEqual64 in *.

  intros.
  subst m_1.
  rewrite access_update_neq.
  subst m_0.
  rewrite access_update in *.
  remember (Mint_0 .[ shift stream_0 2]) as pos.
  rewrite <- H34 in *.
  replace (8 + pos - 8)%Z with pos%Z in * by omega.

  rewrite shift_zero in *.

  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mptr_0 .[ stream_0]) as addr.

  rewrite shift_zero in *.

  unfold P_EqualBits64_2_ in *.
  replace (8 + pos - pos)%Z with 8%Z in * by omega.

  unfold P_EqualBits64_1_ in *.
  rewrite <- Heqaddr in *.

  intros.

  remember (Mint_0.[ shift stream_0 2 <- 8 + pos]) as X.

  assert(((X.[ p_0 <- v_0]).[ shift addr (Cdiv i_0 8)]) 
       = (X.[ shift addr (Cdiv i_0 8)])).
    admit.
  rewrite H41.

  apply H38; auto with zarith.
  unfold P_NormalBitsequence in *.
  auto with zarith.

  admit.

Qed.

Goal typed_ref_BitTest_Package_Foo_Decoder_assert_4.
Hint Package_Foo_Decoder,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.

  intros.
  rewrite shift_zero in *.
  remember (Mint_0 .[ shift stream_0 2]) as pos.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mptr_0 .[ stream_0]) as addr.

  replace (8 + pos - pos)%Z with 8%Z in * by omega.
  rewrite <- H34 in *.
  replace (8 + pos - 8)%Z with pos%Z in * by omega.
  replace (8 + pos - pos)%Z with 8%Z in * by omega.

  rewrite shift_zero in *.
  rewrite <- Heqaddr in *.

  remember (Mint_0.[ shift stream_0 2 <- 8 + pos]) as X.

  assert(((X.[ p_0 <- v_0]).[ shift addr (Cdiv i_0 8)]) 
       = (X.[ shift addr (Cdiv i_0 8)])).
    rewrite access_update_neq.
    reflexivity.
    admit. (* rewrite separated_neq. *)
  rewrite H41.

  apply H38; auto with zarith.
Qed.

Goal typed_ref_BitTest_Package_Foo_Decoder_assert_ABC_equal.
Hint ABC_equal,Package_Foo_Decoder,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.

  intros.

  rewrite shift_zero in *.
  remember (Mint_0 .[ shift stream_0 2]) as pos.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mptr_0 .[ stream_0]) as addr.

  replace (8 + pos - pos)%Z with 8%Z in * by omega.
  rewrite <- H34 in *.
  replace (8 + pos - 8)%Z with pos%Z in * by omega.
  replace (8 + pos - pos)%Z with 8%Z in * by omega.

  rewrite shift_zero in *.
  rewrite <- Heqaddr in *.

  remember (Mint_0.[ shift stream_0 2 <- 8 + pos]) as X.

  assert(((X.[ p_0 <- v_0]).[ shift addr (Cdiv i_0 8)]) 
       = (X.[ shift addr (Cdiv i_0 8)])).
    rewrite access_update_neq.
    reflexivity.
    admit. (* rewrite separated_neq. *)
  rewrite H41.

  apply H38; auto with zarith.
Qed.

Goal typed_ref_BitTest_Package_Foo_Decoder_normal_case_post_copied_2_part1.
Hint Package_Foo_Decoder,copied,normal_case,part-0,property.
Proof.
  intros.
  subst a_0 a_1 a_2 a_3 a_4.
  subst x_0 x_1 x_2 x_3 x_4 x_5 x_6 x_7 x_8 x_9 x_10 x_11.

  unfold P_BitstreamEqual64 in *.
  intros.
  subst m_4.
  rewrite access_update_neq.
    - apply H47.
 unfold P_LeftBitInStream in *.
Qed.

Goal typed_ref_BitTest_Package_Foo_Decoder_normal_case_post_not_set_part1.
Hint Package_Foo_Decoder,normal_case,not_set,part-0,property.
Proof.
(* --------------------------------------
  
From 'typed_ref_BitTest_Package_Foo_Decoder_normal_case_post_copied_2_part1': 
  intros.
  subst a_0 a_1 a_2 a_3 a_4.
  subst x_0 x_1 x_2 x_3 x_4 x_5 x_6 x_7 x_8 x_9 x_10 x_11.

  unfold P_BitstreamEqual64 in *.
  intros.
  subst m_4.
  rewrite access_update_neq.
    - apply H47.
 unfold P_LeftBitInStream in *.
*)
Qed.

Goal typed_ref_BitTest_Package_Foo_Decoder_stmt_post_DEF_upper.
Hint DEF_upper,Package_Foo_Decoder,default,property.
Proof.
  unfold P_UpperBitsNotSet_1_ in *.
  intros.

  rewrite shift_zero in *.
  remember (Mint_0 .[ shift stream_0 2]) as pos.
  remember (Mint_0 .[ shift stream_0 1]) as size.

  rewrite H22 in *.
  replace (8 + pos - 8)%Z with pos%Z in * by omega.
  replace (3 + (8 + pos))%Z with (11 + pos)%Z in * by omega.

  rewrite shift_zero in *.
  remember (Mptr_0 .[ stream_0]) as addr.

  remember (Mint_0 .[ shift stream_0 2 <- v_0]) as X.
  remember (X .[ p_0 <- v_1]) as XX.

  assert (XX .[ shift stream_0 2 <- 11 + pos].[ p_0] = XX.[p_0]).
    rewrite access_update_neq.
      reflexivity.
      admit.
  rewrite H36 in *.

  rewrite HeqXX in *.
  rewrite access_update in *.

  apply H5.

Qed.


