(* Generated by Frama-C WP *)

Goal typed_ref_BitTest_Package_Foo_Encoder_assert_ABC_final.
Hint ABC_final,Package_Foo_Encoder,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  rewrite H43 in *.
  replace (17 + pos - 17) with pos in * by omega.
  replace (17 + pos - 20) with (pos - 3) in * by omega.
  replace (17 + pos - 28) with (pos - 11) in * by omega.
  replace (pos - 3 + (pos - (pos - 3))) with pos in * by omega.
  replace (pos - 11 + (pos - 3 - (pos - 11))) with (pos - 3) in * by omega.
  replace (17 + pos - pos) with 17 in * by omega.

  clear H54 H55.

  rewrite <- H12 in *.
  rewrite <- H13 in *.

  unfold is_uint32 in *.
  unfold is_uint64 in *.

  admit.
(*
  assert (X0_3: Mint_0.[ shift stream_0 2 <- v_0].[p_0] = Mint_3.[p_0]).
    + apply H51.
      apply separated_trans with (p_0) (3).
      unfold included; simpl; auto with zarith.
      apply separated_sym; assumption.
    + rewrite access_update_neq in X0_3.
      rewrite <- X0_3.

      rewrite access_update_neq.
      * rewrite H43; auto with zarith.
        reflexivity.
      * apply separated_neq with (stream_0) (3) (p_0) (3).
        assumption.
        unfold included; simpl; auto with zarith.
        unfold included; simpl; auto with zarith.

*)
Qed.

Goal typed_ref_BitTest_Package_Foo_Encoder_assert_DEF_GHI_equal.
Hint DEF_GHI_equal,Package_Foo_Encoder,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  rewrite H45 in *.
  assert (Mint_1 .[ shift stream_0 2] = pos - 11) by omega.
  rewrite H58 in *.

  replace (11 + (pos - 11)) with pos in * by omega.
  replace (8 + (pos - 11) - (pos - 11)) with 8 in * by omega.
  replace (8 + (pos - 11)) with (pos - 3) in * by omega.
  replace (pos - 3 + (pos - (pos - 3))) with pos in * by omega.
  replace (pos - 11 + 8) with (pos - 3) in * by omega.

  unfold is_uint32 in *.
  unfold is_uint64 in *.

  rewrite H13 in *.
  rewrite <- H12 in *.

  admit.
Qed.

Goal typed_ref_BitTest_Package_Foo_Encoder_stmt_post_ABC_DEF_equal.
Hint ABC_DEF_equal,Package_Foo_Encoder,default,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  rewrite H33 in *.
  replace (8 + pos - pos)%Z with 8%Z in * by omega.
  replace (3 + (8 + pos))%Z with (11 + pos)%Z in * by omega.
  replace (8 + pos + (11 + pos - (8 + pos)))%Z with (11 + pos)%Z in * by omega.

  unfold is_uint32 in *.
  unfold is_uint64 in *.

  rewrite H11 in *.

  assert(wish: forall i_0 : int,
      i_0 < 8 + pos ->
      pos <= i_0 -> 
      (bit_test (Mint_2 .[ shift addr (Cdiv i_0 8)]) (7 - Cmod i_0 8) <->
       bit_test (Mint_1 .[ shift addr (Cdiv i_0 8)]) (7 - Cmod i_0 8))).
    admit.


  assert (X2_1: Mint_2.[p_0] = Mint_1.[p_0]).
  + apply H41.
    apply separated_trans with (p_0) (3).
    unfold included; simpl; auto with zarith.
    apply separated_sym; assumption.
  + rewrite X2_1 in *.
    rewrite access_update_neq.
    rewrite access_update_neq.
    * rewrite H43; auto with zarith.
      
    * apply separated_neq with (stream_0) (3) (addr) (size).
      assumption.
      unfold included; simpl; auto with zarith.
      assert ((0 <= (Cdiv i_0 8) < size)%Z).
      - apply Cdiv_bounds; omega.
      - unfold included; simpl; auto with zarith.

    * apply separated_neq with (stream_0) (3) (p_0) (3).
      assumption.
      unfold included; simpl; auto with zarith.
      unfold included; simpl; auto with zarith.
Qed.

Goal typed_ref_BitTest_Package_Foo_Encoder_stmt_post_DEF_GHI_equal.
Hint DEF_GHI_equal,Package_Foo_Encoder,default,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  rewrite H41 in *.
  rewrite H42 in *.

  replace (3 + (8 + pos)) with (11 + pos) in * by omega.
  replace (17 + (11 + pos)) with (28 + pos) in * by omega.
  replace (8 + pos - pos) with 8 in * by omega.
  replace (11 + pos + (28 + pos - (11 + pos))) with (28 + pos) in * by omega.
  replace (8 + pos + (11 + pos - (8 + pos))) with (11 + pos) in * by omega.

  unfold is_uint32 in *.
  unfold is_uint64 in *.

  rewrite H13 in *.
  rewrite H12 in *.

  admit.
Qed.

Goal typed_ref_BitTest_Package_Foo_Encoder_stmt_post_DEF_equal.
Hint DEF_equal,Package_Foo_Encoder,default,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  rewrite H33 in *.
  replace (8 + pos - pos)%Z with 8%Z in * by omega.
  replace (3 + (8 + pos))%Z with (11 + pos)%Z in * by omega.
  replace (8 + pos + (11 + pos - (8 + pos)))%Z with (11 + pos)%Z in * by omega.

  unfold is_uint32 in *.
  unfold is_uint64 in *.

  rewrite H11 in *.

  assert (X2_0: Mint_2 .[shift p_0 1] = Mint_1 .[shift p_0 1]).
  + apply H41.
    apply separated_trans with (p_0) (3).
    unfold included; simpl; auto with zarith.
    apply separated_sym; assumption.
  + rewrite X2_0 in *.
    rewrite access_update_neq.
    * rewrite H44; auto with zarith.
      reflexivity.
    * apply separated_neq with (stream_0) (3) (p_0) (3).
      assumption.
      unfold included; simpl; auto with zarith.
      unfold included; simpl; auto with zarith.
Qed.

Goal typed_ref_BitTest_Package_Foo_Encoder_stmt_post_GHI_equal.
Hint GHI_equal,Package_Foo_Encoder,default,property.
Proof.
  unfold P_BitstreamEqual64 in *.
  unfold P_EqualBits64_2_ in *.
  unfold P_EqualBits64_1_ in *.
  unfold P_BitstreamInvariant in *.
  intros.

  rewrite shift_zero in *.
  rewrite shift_zero in *.

  remember (Mptr_0 .[ stream_0]) as addr.
  remember (Mint_0 .[ shift stream_0 1]) as size.
  remember (Mint_0 .[ shift stream_0 2]) as pos.

  rewrite H42 in *.
  rewrite H43 in *.
  replace (17 + (3 + (8 + pos)))%Z with (28 + pos)%Z in * by omega.
  replace (3 + (8 + pos) + (28 + pos - (3 + (8 + pos))))%Z with (28 + pos)%Z in * by omega.
  replace (8 + pos - pos)%Z with 8%Z in * by omega.
  replace (11 + pos + (28 + pos - (11 + pos)))%Z with (28 + pos)%Z in * by omega.
  replace (8 + pos + (11 + pos - (8 + pos)))%Z with (11 + pos)%Z in * by omega.
  replace (3 + (8 + pos))%Z with (11 + pos)%Z in * by omega.

  rewrite H12 in *.
  rewrite H13 in *.

  rewrite <- H57; auto with zarith.

  rewrite access_update_neq.

  assert(X3_2: Mint_3 .[ shift p_0 2] = Mint_2 .[ shift p_0 2]).
    apply H51.
    apply separated_trans with (p_0) (3).
    unfold included; simpl; auto with zarith.
    apply separated_sym; assumption.
  rewrite X3_2.
  reflexivity.

  apply separated_neq with (stream_0) (3) (p_0) (3).
  assumption.
  unfold included; simpl; auto with zarith.
  unfold included; simpl; auto with zarith.
Qed.


